require(rpart)
Swiss_rpart <- rpart(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_rpart) # try some different plot options
text(swiss_rpart) # try some different text options
require(party)
treeSwiss<-ctree(Species ~ ., data=iris)
plot(treeSwiss)
cforest(Species ~ ., data=iris, controls=cforest_control(mtry=2, mincriterion=0))
treeFert<-ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
cforest(Fertility ~ Agriculture + Education + Catholic, data = swiss, controls=cforest_control(mtry=2, mincriterion=0))
# look at help info, vary parameters.
library(tree)
tr <- tree(Species ~ ., data=iris)
tr
tr$frame
plot(tr)
text(tr)
# Conditional Inference Tree for Mileage
fit2M <- ctree(Mileage~Price + Country + Reliability + Type, data=na.omit(cu.summary))
summary(fit2M)
# plot tree
plot(fit2M, uniform=TRUE, main="CI Tree Tree for Mileage ")
text(fit2M, use.n=TRUE, all=TRUE, cex=.8)
fitK <- ctree(Kyphosis ~ Age + Number + Start, data=kyphosis)
plot(fitK, main="Conditional Inference Tree for Kyphosisâ")
plot(fitK, main="Conditional Inference Tree for Kyphosis",type="simple")
# Conditional Inference Tree for Mileage
fit2M <- ctree(Mileage~Price + Country + Reliability + Type, data=na.omit(cu.summary))
summary(fit2M)
# plot tree
plot(fit2M, uniform=TRUE, main="CI Tree Tree for Mileage ")
text(fit2M, use.n=TRUE, all=TRUE, cex=.8)
require(randomForest)
fitKF <- randomForest(Kyphosis ~ Age + Number + Start,   data=kyphosis)
print(fitKF) 	# view results
importance(fitKF) # importance of each predictor
#
fitSwiss <- randomForest(Fertility ~ Agriculture + Education + Catholic, data = swiss)
print(fitSwiss) # view results
importance(fitSwiss) # importance of each predictor
varImpPlot(fitSwiss)
plot(fitSwiss)
getTree(fitSwiss,1, labelVar=TRUE)
help(randomForest) # look at all the package contents and the randomForest method options
# look at rfcv - random forest cross-validation -
help(rfcv)
# other data....
data(imports85)
# perform randomForest and other tree methods.....
View(imports85)
# perform randomForest and other tree methods.....
fit85 <- randomForest(imports85 ~ price,   data=imports85)
print(fit85) 	# view results
importance(fit85) # importance of each predictor
plot(fit85)
getTree(fit85,1, labelVar=TRUE)
# perform randomForest and other tree methods.....
fit85 <- randomForest(price ~ aspiration + fuelType + bodyType,   data=imports85)
print(fit85) 	# view results
importance(fit85) # importance of each predictor
plot(fit85)
getTree(fit85,1, labelVar=TRUE)
fit85 <- randomForest(price ~ aspiration + fuelType + bodyType,   data=imports85)
fit85 <- randomForest(price ~ aspiration + fuelType + bodyStlye,   data=imports85)
fit85 <- randomForest(price ~ aspiration + fuelType + bodyStyle,   data=imports85)
imports85 <- dropna(imports85, var='price')
imports85 <- DropNA(imports85, var='price')
# perform randomForest and other tree methods.....
imports85 <- drop_na(imports85, var='price')
# other data....
data(imports85)
library(dplyr)
# perform randomForest and other tree methods.....
imports85 <- drop_na(imports85, var='price')
# other data....
data(imports85)
library(dplyr)
# perform randomForest and other tree methods.....
imports85 <- na.omit(imports85, target.colnames='price')
fit85 <- randomForest(price ~ aspiration + fuelType + bodyStyle,   data=imports85)
print(fit85) 	# view results
importance(fit85) # importance of each predictor
plot(fit85)
getTree(fit85,1, labelVar=TRUE)
install.packages("titanic")
require(titanic)
require(rpart)
Titanic_rpart <- rpart(Survived ~ ., data = titanic)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
titanic < data("Titanic")
require(titanic)
require(rpart)
Titanic_rpart <- rpart(Survived ~ ., data = Titanic)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
# build the  tree
fitM <- rpart(Survived ~ ., method="anova", data=cu.summary)
printcp(fitM) # display the results
plotcp(fitM)
summary(fitM)
par(mfrow=c(1,2))
rsq.rpart(fitM) # visualize cross-validation results
# plot tree
plot(fitM, uniform=TRUE, main="Regression Tree for Titanic ")
text(fitM, use.n=TRUE, all=TRUE, cex=.8)
# prune the tree
pfitM<- prune(fitM, cp=0.01160389) # from cptable??? adjust this to see the effect
# plot the pruned tree
plot(pfitM, uniform=TRUE, main="Pruned Regression Tree for Titanic")
text(pfitM, use.n=TRUE, all=TRUE, cex=.8)
# build the  tree
fitM <- rpart(Survived ~ ., method="anova", data=Titanic)
printcp(fitM) # display the results
plotcp(fitM)
summary(fitM)
par(mfrow=c(1,2))
rsq.rpart(fitM) # visualize cross-validation results
# plot tree
plot(fitM, uniform=TRUE, main="Regression Tree for Titanic ")
text(fitM, use.n=TRUE, all=TRUE, cex=.8)
# prune the tree
pfitM<- prune(fitM, cp=0.01160389) # from cptable??? adjust this to see the effect
# plot the pruned tree
plot(pfitM, uniform=TRUE, main="Pruned Regression Tree for Titanic")
text(pfitM, use.n=TRUE, all=TRUE, cex=.8)
# Regression Tree Example
require(rpart)
# build the  tree
fitM <- rpart(Mileage~Price + Country + Reliability + Type, method="anova", data=cu.summary)
printcp(fitM) # display the results
plotcp(fitM)
summary(fitM)
par(mfrow=c(1,2))
rsq.rpart(fitM) # visualize cross-validation results
# plot tree
plot(fitM, uniform=TRUE, main="Regression Tree for Mileage ")
text(fitM, use.n=TRUE, all=TRUE, cex=.8)
# prune the tree
pfitM<- prune(fitM, cp=0.01160389) # from cptable??? adjust this to see the effect
# plot the pruned tree
plot(pfitM, uniform=TRUE, main="Pruned Regression Tree for Mileage")
text(pfitM, use.n=TRUE, all=TRUE, cex=.8)
dataT <- Titanic
require(rpart)
dataT <- Titanic
Titanic_rpart <- rpart(Survived ~ ., data = Titanic)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
require(rpart)
library(dplyr)
titanic %>% describe()
dataT <- Titanic
head(titanic_train)
require(rpart)
Titanic_rpart <- rpart(Survived ~ ., data = head(titanic_train))
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
Titanic_rpart <- rpart(Survived ~ ., data = titanic_train)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
Titanic_rpart <- rpart(Survived ~ ., data = titanic_train)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
head(titanic_train)
require(rpart)
library(dplyr)
head(titanic_train)
Titanic_rpart <- rpart(Survived ~ Sex+Age+SibSp+Parch, data = titanic_train)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
head(titanic_train)
Titanic_rpart <- rpart(Survived ~ Sex+Age, data = titanic_train)
plot(Titanic_rpart) # try some different plot options
text(Titanic_rpart) # try some different text options
# build the  tree
fitM <- rpart(Survived ~ Sex+Age, method="anova", data=Titanic)
printcp(fitM) # display the results
plotcp(fitM)
summary(fitM)
par(mfrow=c(1,2))
rsq.rpart(fitM) # visualize cross-validation results
# plot tree
plot(fitM, uniform=TRUE, main="Regression Tree for Titanic ")
text(fitM, use.n=TRUE, all=TRUE, cex=.8)
# prune the tree
pfitM<- prune(fitM, cp=0.01160389) # from cptable??? adjust this to see the effect
# plot the pruned tree
plot(pfitM, uniform=TRUE, main="Pruned Regression Tree for Titanic")
text(pfitM, use.n=TRUE, all=TRUE, cex=.8)
# build the  tree
fitM <- rpart(Survived ~ Sex+Age, method="anova", data=titanic_train)
printcp(fitM) # display the results
plotcp(fitM)
summary(fitM)
par(mfrow=c(1,2))
rsq.rpart(fitM) # visualize cross-validation results
# plot tree
plot(fitM, uniform=TRUE, main="Regression Tree for Titanic ")
text(fitM, use.n=TRUE, all=TRUE, cex=.8)
# prune the tree
pfitM<- prune(fitM, cp=0.01160389) # from cptable??? adjust this to see the effect
# plot the pruned tree
plot(pfitM, uniform=TRUE, main="Pruned Regression Tree for Titanic")
text(pfitM, use.n=TRUE, all=TRUE, cex=.8)
